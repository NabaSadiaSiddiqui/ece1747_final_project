
package com.ece1747.serialized;

import java.io.*;
import java.text.ParseException;

public class Decoder {

	public Decoder() {
		
	}
	
	/**
	 * This function detects the word "Value:" in a line and parses the line such that 
	 * only the bytes succeeding the string are placed in the return string. 
	 * i.e: all the sensor data bytes.
	 * 
	 * @param Line: The latest line read from the file.
	 * @return: String if line had valid data to be decoded.
	 *  		null if line did not have to be decoded.
	 * @throws ParseException 
	 */
	private static String parseGenericLine(String Line)
	{
		// Check if it contains string.
		if (Line.indexOf("Value:") == -1)
			return null;
		
		// Create new string with Value: XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX-XX
		String subString = Line.substring(Line.lastIndexOf("Value: ") + 7);
		subString = subString.replaceAll("-", "");
		byte[] sensorData = hexStringToByteArray(subString);
		
		// Check if accel data.
		if (sensorData[0] == 1)
		{
			float accelx = (sensorData[1] & 0xFF) 
		            | ((sensorData[2] & 0xFF) << 8) 
		            | ((sensorData[3] & 0xFF) << 16) 
		            | ((sensorData[4] & 0xFF) << 24);
			float accely = (sensorData[5] & 0xFF) 
		            | ((sensorData[6] & 0xFF) << 8) 
		            | ((sensorData[7] & 0xFF) << 16) 
		            | ((sensorData[8] & 0xFF) << 24);
			float accelz = (sensorData[9] & 0xFF) 
		            | ((sensorData[10] & 0xFF) << 8) 
		            | ((sensorData[11] & 0xFF) << 16) 
		            | ((sensorData[12] & 0xFF) << 24);
			int timestampaccel = (sensorData[13] & 0xFF) 
		            | ((sensorData[14] & 0xFF) << 8) 
		            | ((sensorData[15] & 0xFF) << 16) 
		            | ((sensorData[16] & 0xFF) << 24);
			
			
			//System.out.print(timestampaccel + " " + accelx + " " + accely + " " + accelz + "\n"); 
		}
		else if (sensorData[0] == 2)	// Check if Gyro data.
		{
			float gyrox = (sensorData[1] & 0xFF) 
		            | ((sensorData[2] & 0xFF) << 8) 
		            | ((sensorData[3] & 0xFF) << 16) 
		            | ((sensorData[4] & 0xFF) << 24);
			float gyroy = (sensorData[5] & 0xFF) 
		            | ((sensorData[6] & 0xFF) << 8) 
		            | ((sensorData[7] & 0xFF) << 16) 
		            | ((sensorData[8] & 0xFF) << 24);
			float gyroz = (sensorData[9] & 0xFF) 
		            | ((sensorData[10] & 0xFF) << 8) 
		            | ((sensorData[11] & 0xFF) << 16) 
		            | ((sensorData[12] & 0xFF) << 24);
			int timestampgyro = (sensorData[13] & 0xFF) 
		            | ((sensorData[14] & 0xFF) << 8) 
		            | ((sensorData[15] & 0xFF) << 16) 
		            | ((sensorData[16] & 0xFF) << 24);
			
			
			System.out.print(timestampgyro + " " + gyrox + " " + gyroy + " " + gyroz + "\n"); 
		}
		
		
		
		return  null;
	}

	/**
	 * 
	 * @param s
	 * @return
	 */
	private static byte[] hexStringToByteArray(String s) {
	    int len = s.length();
	    byte[] data = new byte[len / 2];
	    for (int i = 0; i < len; i += 2) {
	        data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
	                             + Character.digit(s.charAt(i+1), 16));
	    }
	    return data;
	}
	
	/**
	 * 
	 * @param args
	 * Input file into the system containing the log file for decoding.
	 */
	public static void main(String[] args) throws IOException{
		// Check if args are valid, if not exit.
		if (args[0] == null)
		{
			System.out.print("No valid file. Exiting");
			return;
		}
		
		// Module has a valid file.
		System.out.print("Log File: " + args[0] + "\n");
		
		// Create and Start reading File Data.
		FileReader fileReader = new FileReader(args[0]);
		try (BufferedReader br = new BufferedReader(fileReader))
		{
			// Read line by line.
			String line;
			
			// Burn the first 20 lines since they dont contain valid data
			for (int i = 0; i < 20; i++)
				br.readLine();
			
			// Start reading the valid lines.
			while ((line = br.readLine()) != null)
			{
				String sensorString;
				// Valid line.
				if ((sensorString = parseGenericLine(line)) != null)
				{
					// This line has valid data.
					System.out.print(sensorString);
				}
			}
		}
		catch (FileNotFoundException e)
		{
			System.out.print("Exception: " + e.toString() + "\n");
		}
	}
}
